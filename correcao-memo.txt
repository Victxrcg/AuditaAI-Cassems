  // Componente memoizado para evitar re-renderizações desnecessárias
  const ComplianceItemCard = memo(({ item }: { item: ComplianceItem }) => {
    // Se for o Parecer Final, renderizar interface especial de IA
    if (item.id === '8') {
    return (
        <Card className="mb-6">
          <CardHeader>
            <div className="flex justify-between items-start">
              <div>
                <CardTitle className="text-lg flex items-center gap-2">
                  <MessageSquare className="h-5 w-5 text-blue-600" />
                  {item.title}
                </CardTitle>
                <CardDescription>
                  {item.description} - Gerado automaticamente por IA
                </CardDescription>
              </div>
            </div>
          </CardHeader>
          
          <CardContent className="space-y-4">
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg border border-blue-200">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-blue-900 mb-2">
                     Gerar Parecer com Inteligência Artificial
                  </h3>
                  <p className="text-blue-700 text-sm">
                    A IA analisará todos os campos preenchidos e gerará um parecer completo em Word ou PDF
                  </p>
                </div>
                <Button 
                  onClick={() => gerarParecer(item.id)}
                  size="lg"
                  className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white"
                  disabled={loading}
                >
                  <MessageSquare className="h-5 w-5 mr-2" />
                  {loading ? 'Gerando...' : 'Gerar Parecer IA'}
                </Button>
              </div>
            </div>

            {item.anexo && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <div className="flex items-center gap-2 text-green-800 mb-2">
                  <CheckCircle className="h-4 w-4" />
                  <span className="font-medium">Parecer gerado com sucesso!</span>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <FileText className="h-4 w-4 text-green-600" />
                    <span className="text-sm text-green-700">{item.anexo.name}</span>
                    <span className="text-xs text-green-600">
                      ({(item.anexo.size / 1024).toFixed(1)} KB)
                    </span>
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm" className="text-green-700 border-green-300">
                      <Download className="h-4 w-4 mr-1" />
                      Baixar
                    </Button>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => handleRemoveFile(item.id)}
                      className="text-red-700 border-red-300"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {item.lastUpdated && (
              <div className="text-xs text-gray-500 border-t pt-2">
                Última atualização: {item.lastUpdated} por {item.updatedBy}
              </div>
            )}
          </CardContent>
        </Card>
      );
    }

    // Renderização normal para outros itens
    return (
      <Card className="mb-6">
        <CardHeader>
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-lg">{item.title}</CardTitle>
              <CardDescription>{item.description}</CardDescription>
            </div>
            <div className="flex items-center gap-2">
              {getStatusBadge(item.status)}
              <Button 
                onClick={() => handleSave(item.id)}
                size="sm"
                className={item.status === 'concluido' ? 'bg-green-600 hover:bg-green-700' : 'bg-blue-600 hover:bg-blue-700'}
                disabled={loading}
              >
                {loading ? (
                  'Salvando...'
                ) : item.status === 'concluido' ? (
                  <>
                    <CheckCircle className="h-4 w-4 mr-1" />
                    Editar
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-1" />
                    Salvar
                  </>
                )}
              </Button>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-4">
          <div className={`grid grid-cols-1 gap-4 ${(item.id === '4' || item.id === '5') ? 'md:grid-cols-3' : 'md:grid-cols-2'}`}>
            {/* Campo Valor - apenas para Imposto Compensado (id: 4) e Valor Compensado (id: 5) */}
            {(item.id === '4' || item.id === '5') && (
              <div>
                <Label htmlFor={`valor-${item.id}`}>
                  <DollarSign className="h-4 w-4 inline mr-1" />
                  Valor
                </Label>
                <input
                  id={`valor-${item.id}`}
                  type="text"
                  value={item.valor || ''}
                  onChange={(e) => handleFieldChange(item.id, 'valor', e.target.value)}
                  placeholder="Digite o valor"
                  className="mt-1 flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                />
              </div>
            )}
            
            <div>
              <Label htmlFor={`data-${item.id}`}>
                <Calendar className="h-4 w-4 inline mr-1" />
                {item.id === '1' ? 'Data da Competência' : 'Data'}
              </Label>
              <input
                id={`data-${item.id}`}
                type="date"
                value={item.data || ''}
                onChange={(e) => handleFieldChange(item.id, 'data', e.target.value)}
                className="mt-1 flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              />
            </div>
            
            <div>
              <Label htmlFor={`observacoes-${item.id}`}>
                <MessageSquare className="h-4 w-4 inline mr-1" />
                Observações
              </Label>
              <Textarea
                id={`observacoes-${item.id}`}
                value={item.observacoes || ''}
                onChange={(e) => handleFieldChange(item.id, 'observacoes', e.target.value)}
                placeholder="Digite suas observações aqui..."
                className="mt-1 w-full min-h-[80px] resize-none"
                rows={3}
              />
            </div>
          </div>

          <div>
            <Label htmlFor={`anexo-${item.id}`}>Anexar Arquivo</Label>
            <div className="mt-1">
              {item.anexo ? (
                <div className="flex items-center justify-between p-3 border rounded-lg bg-gray-50">
                  <div className="flex items-center gap-2">
                    <FileText className="h-4 w-4 text-blue-500" />
                    <span className="text-sm font-medium">{item.anexo.name}</span>
                    <span className="text-xs text-gray-500">
                      ({(item.anexo.size / 1024).toFixed(1)} KB)
                    </span>
                  </div>
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm">
                      <Download className="h-4 w-4" />
                    </Button>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => handleRemoveFile(item.id)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                  <Upload className="h-8 w-8 mx-auto text-gray-400 mb-2" />
                  <p className="text-sm text-gray-600 mb-2">
                    Clique para fazer upload ou arraste o arquivo aqui
                  </p>
                  <Input
                    id={`anexo-${item.id}`}
                    type="file"
                    accept=".pdf,.doc,.docx,.xlsx,.xls"
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) handleFileUpload(item.id, file);
                    }}
                    className="hidden"
                  />
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => document.getElementById(`anexo-${item.id}`)?.click()}
                  >
                    Selecionar Arquivo
                  </Button>
                </div>
              )}
            </div>
          </div>

          {item.lastUpdated && (
            <div className="text-xs text-gray-500 border-t pt-2">
              Última atualização: {item.lastUpdated} por {item.updatedBy}
            </div>
          )}
        </CardContent>
      </Card>
    );
  }, (prevProps, nextProps) => {
    // Função de comparação personalizada para o memo
    // Só re-renderiza se o item específico mudou
    return (
      prevProps.item.id === nextProps.item.id &&
      prevProps.item.valor === nextProps.item.valor &&
      prevProps.item.data === nextProps.item.data &&
      prevProps.item.observacoes === nextProps.item.observacoes &&
      prevProps.item.status === nextProps.item.status &&
      prevProps.item.anexo === nextProps.item.anexo &&
      prevProps.item.lastUpdated === nextProps.item.lastUpdated &&
      prevProps.item.updatedBy === nextProps.item.updatedBy
    );
  });
